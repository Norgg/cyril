#line 2 "lex.yy.cpp"

#line 4 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 50
#define YY_END_OF_BUFFER 51
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[947] =
    {   0,
        0,    0,   51,   50,    1,   47,   18,   50,   50,    8,
       10,    3,    4,    5,    7,   49,    9,    6,   37,   48,
       14,   12,   16,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   11,   13,   45,   45,
       44,   10,   37,    0,    0,   37,   46,   15,   12,   17,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   26,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   32,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   11,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   28,   46,   46,   46,   46,   46,
       46,   46,   11,   45,    0,    2,   37,   46,   10,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       39,   46,   46,   46,   46,   46,   46,   46,   46,   38,
       46,   46,   46,   46,   46,   46,   46,   35,   46,   46,
       46,   27,   46,   41,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       38,   46,   46,   46,   46,   46,   46,   42,   46,   46,
       46,   46,   46,   43,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   38,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   45,   46,   21,   46,
       43,   46,   46,   39,   46,   46,   46,   46,   46,   43,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   42,   46,   46,   46,   46,   46,

       46,   43,   46,   46,   46,   46,   33,   46,   46,   46,
       46,   46,   46,   43,   39,   46,   46,   46,   46,   46,
       46,   46,   46,   22,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   42,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   29,   46,   46,   20,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   45,   46,
       46,   46,   46,   46,   46,   46,   25,   46,   46,   46,
       46,   46,   46,   40,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   43,
       46,   46,   46,   46,   46,   46,   46,   40,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   43,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   42,
       46,   46,   19,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   31,   46,   46,   30,   46,   34,   43,   46,
       45,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   43,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   39,
       46,   46,   46,   46,   46,   43,   36,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   24,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   43,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   23,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    5,    6,    7,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,    1,   19,
       20,   21,    1,    1,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   30,   31,   32,   33,   34,   35,   36,
       30,   37,   38,   39,   30,   40,   41,   30,   42,   30,
        1,    1,    1,    1,   30,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,    1,   69,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1
    } ;

static yyconst flex_int16_t yy_base[951] =
    {   0,
        0,    0, 2115, 2124, 2124, 2124, 2094,   53,    0, 2124,
     2105, 2124, 2124, 2124, 2124, 2124, 2095, 2095,   56, 2124,
     2090, 2088, 2087, 2091,   57,   67,   69,   88,   59,   89,
       91,   71,   94,   70,  118,  123,  129,   93,  141,  142,
      190,  160,   66,  149,  144,   76, 2036, 2124,  236,    0,
        0, 2124,   72, 2100, 2084,   73, 2085, 2124, 2124, 2124,
      139,  162,  152,  153,  148,  158,  145,  204,  156,  163,
      102,  166,  182,  212,  167,  186,  168,  227,  223,  199,
      211,  215,  234,  164,  216,  219,  270,  235,  239,  221,
      272,  236,  274, 2084,  241,  254,  250,  282,  276,  284,

      280,  288,  287,  296,  298,  294,  293,  299,  305,  302,
      295,  317,  307,  301,  309,  312,  313,  339,  346,  319,
      350,  355,  356,  360,  353,  315,  368,  361,  363,  372,
      364,  373,  374,  376,  378,  377,  379,  380,  382,  386,
      387,  390, 2124,  434, 2095, 2124, 2080,  397, 2076,  393,
      395,  400,  402,  399,  409,  406,  407,  420,  411,  421,
     2069,  430,  432,  438,  412,  439,  413,  449,  454, 2067,
      434,  456,  458,  459,  460,   77,  468, 2066,  472,  473,
      475,  476,  477, 2065,  478,  483,  479,  484,  485,  486,
      488,  489,  492,  487,  493,  490,  491,  494,  498,  499,

      500,  501,  510,  514,  516,  509,  517,  506,  522,  527,
      528,  530,  531,  532,  534,  544,  533,  545,  552,  549,
      554,  557,  555,  561,  556,  560,  563,  564,  565,  566,
      571,  568,  567, 2063,  572,  573,  577,  576,  575,  580,
      578,  587,  588,  581,  589,   79,  592,  595,  597,  608,
      616,  612,  297,  613,  618,  619,  621,  627,  623,  620,
      625,  626,  628,  630,  632,  634,  678,  636, 2062,  633,
      635,  637,  640,   68,  646,  643,  657,  662,  661,  693,
      641,  642,  649,  650,  663,  670,  681,  684,  666,  731,
      698,  700,  683,  701, 2061,  714,  676,  702,  713,  719,

      703,  725,  726,  724,  727,  734, 2060,  729,  735,  736,
      745,  737,  738,  761,  741,  742,  746,  743,  760,  766,
      752,  764,  769, 2058,  770,  779,  772,  780,  784,  786,
      789,  787,  790,  793,  795,  797,  794,  798,  799,  801,
      803,  805,  808,  810,  815,  819,  817,  821,  820,  824,
      827,  825,  830,  831,  832, 2057,  835,  834, 2056,  837,
      838,  840,  841,  845,  843,  846,  854,  849,  890,  851,
      855,  865,  860,  863,  874,  869, 2055,  867,  858,  870,
      868,  879,  887, 1508,  889,  907,  908,  909,  882,  910,
      911,  884,  915,  913,  925,  917,  927,  916,  930,  929,

      940,  931,  932,  935,  933,  937,  941,  936,  938,  942,
      939,  944,  947,  951,  956,  958,  975,  981,  971,  959,
      978,  982,  983,  986,  991,  992,  997,  996,  998,  999,
     1000, 1005, 1007, 1010, 1011, 1012, 1014, 1015, 1020, 1018,
     1021, 1023, 1025, 1024, 1029, 1026, 1030, 1027, 1040, 1107,
     1043, 1044, 1106, 1046, 1033, 1037, 1064, 1050, 1054, 1063,
     1051, 1056, 1105, 1057, 1060,  647, 1067,  414, 1070, 1073,
     1122, 1079, 1080, 1081, 1086, 1089, 1084, 1087, 1096, 1097,
     1098, 1090, 1092, 1100, 1101, 1094, 1108, 1113, 1104, 1117,
     1144, 1091, 1110, 1127, 1147, 1109, 1158, 1159, 1115, 1121,

     1161, 1162, 1164, 1165, 1166, 1103, 1168, 1167, 1169, 1170,
     1171, 1173, 1174, 1175, 1177, 1176, 1179, 1180, 1183, 1184,
     1181, 1185, 1188, 1190, 1191, 1192, 1197, 1199, 1206, 1194,
     1239, 1205, 1210, 1211, 1221, 1223, 1241, 1200, 1243, 1248,
     1250, 1251, 1252, 1254, 1255, 1256, 1258, 1266, 1261, 1267,
     1268, 1270, 1271, 1272, 1275, 1274, 1276, 1277, 1278, 1280,
     1284, 1283, 1288, 1285, 1289, 1291,    0, 1292, 1293, 1298,
     1299, 1300, 1301, 1303, 1302, 1312, 1305, 1315, 1318, 1324,
     1326, 1325, 1327, 1330, 1331, 1337, 1333, 1338, 1336, 1342,
     1339, 1343, 1344, 1346, 1345, 1351, 1348, 1350, 1349, 1352,

     1359, 1355, 1360, 1362, 1366, 1367, 1372, 1375, 1373, 1378,
     1376, 1380, 1381, 1387, 1393, 1395, 1396, 1401, 1397, 1399,
     1402, 1403, 1404, 1409, 1411, 1413, 1414, 1416, 1419, 1417,
     1421, 1425, 1424, 1429, 1433, 1435, 1436, 1440, 1439, 1442,
     1444, 1447, 1451, 1448, 1449,  316, 1450, 1454, 1461, 1453,
     1459, 1455, 1466, 1467, 1473, 1471, 1479, 1475, 1477, 1491,
     1490, 1484, 1487, 1493, 1495, 1496, 1499, 1497, 1501, 1502,
     1504, 1195, 1505, 1506, 1503, 1517, 1507, 1524, 1526, 1527,
     1509, 1510, 1511, 1528, 1512, 1521, 1530, 1533, 1536, 1545,
     1547, 1551, 1554, 1555, 1561, 1557, 1562, 1564, 1567, 1566,

     1568, 1570, 1569, 1573, 1571, 1572, 1579, 1574, 1582, 1576,
     1580, 1583, 1585, 1586, 1587, 1588, 1592, 1591, 1594, 1595,
     1596, 1608, 1609, 1616, 1617, 1619, 1620, 1621, 1624, 1625,
     1631, 1630, 1629, 1635, 1636, 1633, 1640, 1641, 1642, 1643,
     1644,  217, 1645, 1649, 1650, 1651, 1652, 1653, 1654, 1655,
     1659, 1658, 1660, 1668, 1663, 1674, 1676, 1673, 1677, 1681,
     1684, 1683, 1679, 1686, 1688, 1689, 1692, 1697, 1694, 1707,
     1699, 1701, 1702, 1719, 1703, 1704, 1722, 1713, 1723, 1724,
     1726, 1728, 1731, 1729, 1733, 1736, 1739, 1740, 1743, 1744,
     1746, 1747, 1749, 1748, 1750, 1752, 1753, 1757, 1756, 1762,

     1759, 1763, 1764, 1765, 1769, 1767, 1770, 1774, 1775, 1777,
     1779, 1780, 1786, 1790, 1792, 1796, 1799, 1798, 1800, 1803,
     1804, 1805, 1807, 1812, 1808, 1810, 1814, 1817, 1820, 1822,
     1825, 1828, 1829, 1824, 1831, 1833, 1839, 1840, 1847, 1843,
     1849, 1838, 1848, 1844, 1850, 1853, 1854, 1859, 1862, 1863,
     1864, 1866, 1867, 1868, 1869, 1872, 1873, 1882, 1877, 1885,
     1878, 1887, 1888, 1889, 1891, 1892, 1893, 1896, 1897, 1908,
     1902, 1903, 1906, 1910, 1912, 1911, 1922, 1923, 1913, 1917,
     1915, 1926, 1927, 1929, 1933, 1935, 1924, 1938, 1939, 1942,
     1944, 1950, 1952, 1951, 1960, 1962, 1963, 1964, 1965, 1967,

     1968, 1970, 1972, 1974, 1975, 1977, 1978, 1973, 1979, 1980,
     1976, 1981, 1986, 1989, 1997, 1988, 1998, 1999, 2001, 2002,
     2003, 2004, 1983, 1987, 2013, 2023, 2007, 2025, 2026, 2031,
     2032, 2027, 2037, 2036, 2038, 2040, 2044, 2042, 2047, 2049,
     2041, 2046, 2050, 2052, 2053, 2124,  104,   92, 2117, 2120
    } ;

static yyconst flex_int16_t yy_def[951] =
    {   0,
      946,    1,  946,  946,  946,  946,  946,  947,  948,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  949,  946,
      946,  946,  946,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  946,  946,  947,  947,
      948,  946,  946,  950,  946,  949,  949,  946,  946,  946,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  946,  947,  950,  946,  946,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  947,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  947,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      947,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  947,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,

      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,    0,  946,  946,  946,  946
    } ;

static yyconst flex_int16_t yy_nxt[2194] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,    4,   18,   19,   20,   21,   22,
       23,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   24,   34,   35,   36,   37,   38,   39,   24,   40,
       41,   42,   43,   44,   45,   24,   46,   24,   47,   49,
       55,  946,   56,  946,   49,   49,   49,   49,   49,   49,
      946,  946,  946,  946,  946,  946,   55,   55,   53,   56,
      946,  946,  374,  946,   51,   49,   49,   49,   49,   49,

       49,  351,  946,  946,  293,  946,   50,  946,  946,   65,
       61,   72,   62,   66,   81,   63,  946,   67,   73,   98,
       68,  137,  142,   69,   64,   74,   70,   92,   75,   71,
       77,   93,  946,   88,   78,   76,   82,  946,   79,   83,
       89,   94,   84,  946,   80,   85,  109,   90,   95,   96,
       91,   86,  110,  946,   87,  946,  946,   97,  946,  946,
       99,  163,  946,  946,  100,  102,  946,  946,  101,  103,
      946,  106,  946,  104,  946,  107,  946,  946,  946,  105,
      946,  946,  946,  111,  117,  108,  140,  112,  118,  148,
      119,  113,  154,  141,  114,  138,  946,  115,  120,  139,

      946,  155,  131,  116,  946,  157,  132,  149,  156,  133,
      134,  164,  150,  946,  152,  153,  135,  171,  946,  162,
      181,  161,  136,  151,  165,  946,  946,  173,  172,  946,
      946,  946,  121,  946,  122,  946,  123,  946,  166,  124,
      125,  946,  126,  127,  177,  128,  158,  129,  946,  946,
      946,  130,  144,  946,  159,  946,  178,  144,  144,  144,
      144,  144,  144,  183,  946,  167,  160,  168,  946,  161,
      174,  169,  170,  175,  188,  182,  170,  176,  144,  144,
      144,  144,  144,  144,  946,  186,  946,  179,  946,  161,
      946,  192,  184,  180,  946,  187,  946,  193,  946,  194,

      184,  946,  946,  185,  195,  184,  196,  946,  946,  946,
      946,  946,  946,  946,  189,  946,  946,  170,  190,  946,
      234,  946,  191,  946,  197,  215,  946,  946,  202,  946,
      946,  946,  207,  946,  203,  204,  205,  170,  200,  198,
      199,  208,  211,  201,  219,  170,  220,  206,  221,  216,
      217,  209,  222,  946,  223,  218,  210,  213,  214,  224,
      946,  212,  226,  227,  946,  161,  228,  946,  232,  946,
      946,  230,  231,  229,  946,  946,  225,  946,  946,  235,
      236,  246,  946,  233,  234,  237,  946,  946,  946,  170,
      946,  946,  946,  946,  946,  238,  946,  241,  242,  244,

      946,  946,  243,  239,  946,  240,  245,  946,  170,  946,
      247,  946,  249,  946,  946,  254,  946,  248,  251,  253,
      946,  946,  250,  946,  255,  946,  946,  946,  946,  256,
      257,  252,  258,  264,  946,  946,  259,  265,  262,  261,
      260,  268,  271,  266,  946,  270,  946,  269,  946,  263,
      267,  273,  946,  946,  275,  267,  267,  267,  267,  267,
      267,  272,  274,  946,  277,  276,  279,  280,  946,  286,
      946,  284,  946,  946,  946,  278,  267,  267,  267,  267,
      267,  267,  946,  285,  283,  282,  946,  946,  289,  946,
      946,  946,  946,  946,  281,  161,  287,  946,  946,  946,

      946,  946,  946,  946,  946,  946,  946,  946,  946,  288,
      290,  234,  946,  946,  946,  946,  294,  292,  184,  296,
      946,  291,  298,  946,  946,  295,  299,  305,  946,  302,
      946,  946,  303,  161,  297,  304,  946,  306,  300,  301,
      310,  946,  946,  309,  946,  946,  946,  946,  946,  308,
      313,  234,  234,  311,  307,  312,  314,  170,  946,  946,
      315,  319,  316,  946,  327,  317,  946,  318,  946,  946,
      946,  946,  322,  323,  946,  946,  161,  946,  946,  946,
      946,  946,  946,  320,  325,  946,  946,  946,  321,  946,
      946,  946,  946,  324,  946,  946,  335,  234,  330,  332,

      331,  946,  946,  946,  326,  334,  946,  329,  328,  946,
      336,  946,  234,  170,  346,  340,  333,  234,  234,  341,
      338,  342,  946,  337,  347,  344,  946,  946,  161,  343,
      946,  345,  946,  946,  946,  946,  349,  946,  339,  946,
      946,  946,  946,  353,  946,  348,  946,  946,  946,  946,
      946,  946,  350,  352,  946,  946,  946,  946,  354,  234,
      946,  946,  355,  946,  946,  359,  234,  360,  357,  361,
      363,  946,  365,  356,  170,  946,  946,  946,  358,  364,
      946,  362,  370,  234,  946,  366,  161,  368,  373,  372,
      946,  371,  234,  367,  369,  946,  234,  946,  946,  369,

      369,  369,  369,  369,  369,  375,  376,  946,  380,  234,
      381,  382,  946,  377,  946,  946,  946,  946,  404,  383,
      369,  369,  369,  369,  369,  369,  387,  946,  946,  384,
      378,  385,  379,  946,  234,  399,  403,  400,  946,  946,
      946,  946,  401,  946,  386,  946,  384,  402,  946,  946,
      946,  946,  946,  388,  389,  946,  946,  946,  390,  946,
      946,  391,  405,  392,  408,  393,  946,  394,  395,  396,
      397,  409,  416,  406,  946,  946,  413,  412,  946,  407,
      946,  410,  414,  946,  946,  234,  946,  398,  419,  424,
      411,  415,  417,  946,  946,  234,  234,  420,  946,  418,

      946,  946,  421,  946,  946,  422,  426,  946,  946,  946,
      423,  946,  946,  946,  429,  946,  433,  946,  425,  946,
      427,  444,  946,  428,  946,  170,  430,  434,  435,  946,
      443,  946,  431,  946,  946,  946,  432,  440,  946,  946,
      438,  946,  439,  441,  946,  946,  946,  442,  946,  946,
      436,  946,  946,  437,  946,  946,  446,  946,  447,  946,
      946,  450,  445,  946,  448,  946,  452,  453,  946,  946,
      455,  457,  946,  472,  946,  454,  449,  946,  451,  946,
      456,  946,  946,  946,  946,  460,  459,  461,  946,  458,
      481,  467,  468,  946,  466,  462,  946,  463,  946,  464,

      469,  946,  465,  946,  234,  470,  471,  474,  479,  476,
      480,  471,  471,  471,  471,  471,  471,  473,  477,  475,
      234,  946,  946,  946,  946,  946,  492,  946,  478,  946,
      946,  946,  471,  471,  471,  471,  471,  471,  482,  946,
      483,  946,  484,  946,  946,  946,  946,  946,  488,  946,
      946,  946,  946,  946,  946,  946,  946,  485,  946,  495,
      491,  946,  487,  515,  486,  946,  489,  496,  493,  490,
      946,  497,  946,  946,  494,  501,  512,  500,  498,  499,
      502,  503,  504,  514,  511,  946,  505,  510,  508,  946,
      506,  507,  946,  513,  509,  946,  946,  946,  520,  516,

      946,  518,  517,  521,  522,  946,  946,  234,  523,  524,
      946,  946,  946,  946,  946,  525,  526,  519,  527,  946,
      530,  946,  528,  538,  946,  946,  946,  534,  946,  946,
      529,  532,  946,  234,  946,  946,  531,  946,  946,  946,
      946,  946,  537,  946,  946,  533,  539,  946,  552,  450,
      234,  946,  535,  536,  946,  547,  545,  946,  946,  546,
      946,  543,  554,  540,  946,  946,  541,  550,  946,  234,
      946,  946,  542,  544,  946,  450,  553,  946,  946,  548,
      549,  946,  234,  551,  946,  562,  558,  946,  234,  555,
      556,  559,  234,  946,  946,  946,  560,  450,  946,  557,

      946,  946,  561,  946,  946,  946,  946,  565,  946,  563,
      946,  946,  946,  234,  946,  946,  564,  946,  946,  946,
      946,  946,  946,  946,  946,  599,  569,  946,  234,  946,
      573,  946,  568,  574,  579,  946,  578,  566,  567,  588,
      570,  946,  571,  567,  567,  567,  567,  567,  567,  234,
      572,  577,  575,  576,  581,  583,  580,  584,  946,  585,
      589,  946,  591,  586,  567,  567,  567,  567,  567,  567,
      582,  590,  946,  946,  594,  946,  946,  595,  946,  946,
      946,  946,  946,  946,  946,  946,  587,  946,  946,  946,
      946,  946,  234,  946,  946,  946,  602,  946,  946,  946,

      592,  593,  946,  596,  946,  946,  946,  601,  946,  946,
      605,  946,  234,  946,  946,  608,  764,  597,  600,  946,
      946,  606,  604,  607,  946,  946,  609,  603,  234,  610,
      598,  234,  234,  611,  612,  946,  234,  946,  618,  621,
      617,  613,  619,  622,  615,  626,  184,  616,  620,  623,
      624,  614,  627,  946,  635,  946,  636,  946,  625,  640,
      628,  629,  946,  639,  946,  946,  946,  637,  946,  946,
      946,  638,  946,  630,  631,  946,  632,  633,  634,  641,
      946,  946,  946,  651,  946,  946,  946,  234,  946,  946,
      946,  946,  946,  655,  946,  647,  643,  946,  946,  946,

      646,  642,  946,  946,  661,  946,  946,  946,  645,  648,
      644,  662,  946,  946,  946,  946,  946,  946,  666,  946,
      649,  657,  234,  654,  653,  650,  946,  658,  652,  946,
      659,  656,  946,  668,  234,  664,  663,  660,  946,  946,
      946,  946,  671,  665,  946,  946,  672,  946,  669,  673,
      946,  946,  946,  946,  667,  674,  946,  946,  946,  946,
      946,  670,  946,  946,  946,  946,  946,  676,  675,  946,
      687,  234,  692,  946,  946,  680,  946,  677,  234,  678,
      946,  946,  234,  681,  683,  682,  946,  946,  679,  946,
      946,  685,  946,  686,  946,  946,  694,  234,  690,  684,

      234,  946,  693,  234,  689,  688,  691,  946,  695,  946,
      946,  946,  698,  946,  696,  946,  946,  946,  946,  697,
      700,  701,  699,  946,  703,  946,  704,  946,  946,  708,
      946,  946,  702,  946,  706,  946,  234,  710,  946,  946,
      707,  711,  705,  946,  712,  716,  709,  946,  184,  946,
      946,  718,  713,  946,  946,  715,  946,  719,  946,  714,
      721,  946,  946,  946,  946,  946,  720,  946,  946,  946,
      717,  726,  723,  946,  722,  946,  724,  732,  727,  730,
      946,  946,  728,  725,  735,  946,  729,  946,  734,  946,
      736,  946,  737,  946,  731,  234,  733,  738,  946,  741,

      742,  946,  740,  744,  946,  946,  739,  946,  743,  946,
      946,  946,  745,  946,  746,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  750,  234,  748,
      747,  946,  749,  752,  234,  946,  754,  753,  946,  751,
      946,  946,  946,  755,  946,  234,  760,  946,  234,  756,
      946,  758,  765,  757,  763,  759,  761,  762,  234,  946,
      234,  946,  771,  234,  234,  946,  769,  766,  946,  946,
      234,  946,  767,  768,  770,  946,  946,  772,  946,  774,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  773,
      946,  776,  784,  946,  946,  777,  946,  946,  775,  946,

      946,  946,  946,  781,  778,  946,  946,  234,  946,  946,
      946,  780,  234,  234,  794,  793,  779,  234,  234,  783,
      785,  787,  946,  946,  234,  782,  789,  788,  786,  234,
      946,  946,  790,  946,  946,  946,  791,  234,  946,  946,
      796,  792,  234,  946,  946,  946,  234,  946,  797,  946,
      946,  234,  795,  807,  946,  946,  946,  946,  946,  946,
      800,  802,  803,  946,  946,  946,  946,  946,  946,  946,
      798,  799,  946,  946,  946,  234,  801,  946,  234,  234,
      804,  806,  946,  805,  234,  808,  809,  946,  946,  811,
      946,  946,  234,  946,  812,  946,  234,  946,  946,  234,

      946,  814,  946,  946,  810,  234,  946,  234,  946,  818,
      815,  946,  813,  946,  450,  946,  946,  946,  946,  816,
      234,  946,  234,  820,  234,  819,  234,  946,  384,  817,
      234,  821,  384,  946,  826,  234,  946,  946,  946,  822,
      946,  828,  946,  946,  234,  946,  829,  946,  827,  234,
      946,  823,  824,  946,  946,  825,  234,  946,  946,  830,
      946,  946,  946,  946,  946,  234,  946,  946,  234,  234,
      946,  946,  833,  946,  234,  831,  946,  946,  946,  946,
      836,  946,  835,  946,  946,  832,  837,  834,  946,  946,
      849,  946,  234,  946,  946,  184,  843,  838,  234,  846,

      946,  842,  234,  840,  946,  844,  946,  839,  841,  845,
      946,  847,  946,  946,  946,  851,  848,  946,  946,  946,
      853,  946,  946,  854,  946,  850,  946,  852,  946,  865,
      856,  946,  234,  857,  946,  855,  946,  234,  946,  946,
      858,  860,  946,  946,  861,  946,  234,  946,  866,  862,
      234,  234,  946,  946,  946,  450,  859,  946,  946,  864,
      868,  946,  946,  946,  946,  863,  880,  946,  946,  867,
      869,  234,  871,  946,  234,  879,  946,  946,  946,  870,
      946,  946,  946,  946,  234,  881,  946,  946,  234,  873,
      875,  946,  946,  872,  874,  877,  946,  876,  234,  946,

      878,  946,  946,  946,  882,  946,  946,  946,  890,  885,
      946,  946,  883,  888,  234,  234,  946,  946,  892,  886,
      946,  884,  946,  891,  946,  946,  946,  946,  887,  946,
      889,  946,  234,  234,  234,  893,  946,  946,  946,  897,
      946,  946,  234,  946,  895,  894,  903,  946,  896,  946,
      899,  234,  946,  946,  900,  911,  946,  909,  946,  898,
      904,  234,  901,  902,  946,  946,  946,  905,  906,  234,
      908,  234,  907,  234,  946,  910,  946,  946,  946,  946,
      913,  946,  946,  912,  946,  234,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  917,  946,  915,  914,

      946,  946,  946,  946,  916,  384,  918,  234,  929,  920,
      234,  946,  946,  946,  234,  946,  946,  946,  946,  234,
      923,  946,  919,  922,  924,  931,  927,  946,  921,  928,
      184,  234,  234,  234,  234,  925,  930,  946,  926,  946,
      946,  946,  234,  234,  234,  946,  946,  234,  932,  234,
      946,  946,  946,  234,  946,  946,  946,  234,  946,  234,
      946,  946,  234,  946,  946,  184,  946,  946,  938,  946,
      946,  946,  946,  933,  946,  946,  946,  946,  937,  946,
      946,  946,  234,  946,  940,  935,  234,  934,  941,  234,
      946,  936,  939,  234,  943,  942,  147,  146,  946,  946,

      147,  234,  146,  944,  143,  946,   60,   59,  945,   58,
       54,   53,   52,   48,  946,  946,  946,  234,   57,   57,
      145,  145,  145,    3,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946

    } ;

static yyconst flex_int16_t yy_chk[2194] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    8,
       19,   25,   19,   29,    8,    8,    8,    8,    8,    8,
       43,   26,  274,   27,   34,   32,   53,   56,   53,   56,
       46,  176,  274,  246,  948,    8,    8,    8,    8,    8,

        8,  246,   28,   30,  176,   31,  947,   38,   33,   26,
       25,   27,   25,   26,   29,   25,   71,   26,   27,   34,
       26,   43,   46,   26,   25,   27,   26,   32,   27,   26,
       28,   32,   35,   31,   28,   27,   30,   36,   28,   30,
       31,   33,   30,   37,   28,   30,   38,   31,   33,   33,
       31,   30,   38,   61,   30,   39,   40,   33,   45,   67,
       35,   71,   65,   44,   35,   36,   63,   64,   35,   36,
       69,   37,   66,   36,   42,   37,   62,   70,   84,   36,
       72,   75,   77,   39,   40,   37,   45,   39,   40,   61,
       40,   39,   65,   45,   39,   44,   73,   39,   40,   44,

       76,   65,   42,   39,   41,   67,   42,   62,   66,   42,
       42,   72,   62,   80,   63,   64,   42,   75,   68,   70,
       84,   69,   42,   62,   73,   81,   74,   77,   76,   82,
       85,  742,   41,   86,   41,   90,   41,   79,   73,   41,
       41,   78,   41,   41,   80,   41,   68,   41,   83,   88,
       92,   41,   49,   89,   68,   95,   81,   49,   49,   49,
       49,   49,   49,   86,   97,   74,   68,   74,   96,   79,
       78,   74,   74,   78,   90,   85,   82,   79,   49,   49,
       49,   49,   49,   49,   87,   88,   91,   83,   93,   95,
       99,   92,   87,   83,  101,   89,   98,   92,  100,   96,

       87,  103,  102,   87,   96,   87,   97,  107,  106,  111,
      104,  253,  105,  108,   91,  114,  110,   93,   91,  109,
      253,  113,   91,  115,   98,  108,  116,  117,  101,  126,
      646,  112,  103,  120,  101,  101,  102,   93,  100,   99,
       99,  104,  105,  100,  110,  102,  110,  102,  111,  108,
      109,  104,  111,  118,  111,  109,  104,  106,  107,  112,
      119,  105,  113,  114,  121,  112,  115,  125,  117,  122,
      123,  116,  116,  115,  124,  128,  112,  129,  131,  120,
      120,  126,  127,  118,  118,  120,  130,  132,  133,  119,
      134,  136,  135,  137,  138,  121,  139,  122,  123,  125,

      140,  141,  124,  121,  142,  121,  125,  150,  125,  151,
      127,  148,  129,  154,  152,  132,  153,  128,  130,  131,
      156,  157,  129,  155,  133,  159,  165,  167,  468,  134,
      134,  130,  135,  141,  158,  160,  136,  141,  139,  138,
      137,  148,  152,  142,  162,  151,  163,  150,  171,  140,
      144,  154,  164,  166,  156,  144,  144,  144,  144,  144,
      144,  153,  155,  168,  158,  157,  159,  160,  169,  167,
      172,  165,  173,  174,  175,  158,  144,  144,  144,  144,
      144,  144,  177,  166,  164,  163,  179,  180,  171,  181,
      182,  183,  185,  187,  162,  168,  169,  186,  188,  189,

      190,  194,  191,  192,  196,  197,  193,  195,  198,  169,
      173,  172,  199,  200,  201,  202,  177,  175,  185,  180,
      208,  174,  182,  206,  203,  179,  183,  193,  204,  188,
      205,  207,  190,  191,  181,  192,  209,  194,  186,  187,
      198,  210,  211,  197,  212,  213,  214,  217,  215,  196,
      202,  189,  190,  199,  195,  200,  203,  201,  216,  218,
      204,  208,  205,  220,  217,  206,  219,  207,  221,  223,
      225,  222,  211,  213,  226,  224,  212,  227,  228,  229,
      230,  233,  232,  209,  215,  231,  235,  236,  210,  239,
      238,  237,  241,  214,  240,  244,  228,  213,  220,  222,

      221,  242,  243,  245,  216,  224,  247,  219,  218,  248,
      229,  249,  226,  232,  242,  236,  223,  227,  225,  237,
      231,  238,  250,  230,  242,  240,  252,  254,  233,  239,
      251,  241,  255,  256,  260,  257,  244,  259,  235,  261,
      262,  258,  263,  249,  264,  243,  265,  270,  266,  271,
      268,  272,  245,  247,  273,  281,  282,  276,  250,  248,
      275,  466,  251,  283,  284,  256,  254,  257,  252,  258,
      260,  277,  264,  251,  263,  279,  278,  285,  255,  262,
      289,  259,  268,  272,  286,  265,  261,  266,  273,  271,
      297,  270,  275,  265,  267,  287,  281,  293,  288,  267,

      267,  267,  267,  267,  267,  276,  278,  280,  282,  277,
      283,  284,  291,  279,  292,  294,  298,  301,  297,  285,
      267,  267,  267,  267,  267,  267,  289,  299,  296,  286,
      280,  288,  280,  300,  287,  292,  296,  292,  304,  302,
      303,  305,  293,  308,  288,  290,  291,  294,  306,  309,
      310,  312,  313,  290,  290,  315,  316,  318,  290,  311,
      317,  290,  298,  290,  301,  290,  321,  290,  290,  290,
      290,  302,  311,  299,  319,  314,  306,  305,  322,  300,
      320,  303,  306,  323,  325,  309,  327,  290,  314,  320,
      304,  310,  312,  326,  328,  308,  315,  316,  329,  313,

      330,  332,  317,  331,  333,  318,  322,  334,  337,  335,
      319,  336,  338,  339,  327,  340,  331,  341,  321,  342,
      323,  339,  343,  325,  344,  326,  328,  331,  331,  345,
      338,  347,  329,  346,  349,  348,  330,  335,  350,  352,
      333,  351,  334,  336,  353,  354,  355,  337,  358,  357,
      331,  360,  361,  332,  362,  363,  341,  365,  342,  364,
      366,  345,  340,  368,  343,  370,  347,  348,  367,  371,
      350,  352,  379,  370,  373,  349,  344,  374,  346,  372,
      351,  378,  381,  376,  380,  355,  354,  357,  375,  353,
      381,  364,  366,  382,  363,  358,  389,  360,  392,  361,

      367,  383,  362,  385,  365,  368,  369,  372,  379,  374,
      380,  369,  369,  369,  369,  369,  369,  371,  376,  373,
      375,  386,  387,  388,  390,  391,  392,  394,  378,  393,
      398,  396,  369,  369,  369,  369,  369,  369,  382,  395,
      383,  397,  385,  400,  399,  402,  403,  405,  389,  404,
      408,  406,  409,  411,  401,  407,  410,  386,  412,  394,
      391,  413,  388,  411,  387,  414,  390,  395,  393,  390,
      415,  395,  416,  420,  393,  398,  408,  397,  395,  396,
      399,  400,  401,  410,  407,  419,  401,  406,  404,  417,
      402,  403,  421,  409,  405,  418,  422,  423,  417,  412,

      424,  415,  413,  418,  418,  425,  426,  414,  418,  418,
      428,  427,  429,  430,  431,  418,  418,  416,  418,  432,
      420,  433,  418,  430,  434,  435,  436,  425,  437,  438,
      419,  423,  440,  421,  439,  441,  422,  442,  444,  443,
      446,  448,  429,  445,  447,  424,  431,  455,  446,  428,
      432,  456,  426,  427,  449,  439,  437,  451,  452,  438,
      454,  435,  449,  433,  458,  461,  433,  443,  459,  442,
      462,  464,  434,  436,  465,  445,  447,  460,  457,  440,
      441,  467,  448,  444,  469,  460,  457,  470,  454,  451,
      452,  457,  455,  472,  473,  474,  458,  461,  477,  456,

      475,  478,  459,  476,  482,  492,  483,  469,  486,  462,
      479,  480,  481,  464,  484,  485,  465,  506,  489,  463,
      453,  450,  487,  496,  493,  506,  473,  488,  467,  499,
      477,  490,  472,  478,  483,  500,  482,  470,  471,  492,
      474,  494,  475,  471,  471,  471,  471,  471,  471,  486,
      476,  481,  479,  480,  485,  488,  484,  489,  491,  490,
      493,  495,  496,  490,  471,  471,  471,  471,  471,  471,
      487,  494,  497,  498,  499,  501,  502,  500,  503,  504,
      505,  508,  507,  509,  510,  511,  491,  512,  513,  514,
      516,  515,  495,  517,  518,  521,  509,  519,  520,  522,

      497,  498,  523,  501,  524,  525,  526,  508,  530,  672,
      513,  527,  510,  528,  538,  517,  672,  502,  507,  532,
      529,  514,  512,  515,  533,  534,  518,  511,  516,  519,
      503,  504,  505,  520,  521,  535,  530,  536,  525,  527,
      524,  522,  526,  527,  523,  528,  525,  523,  526,  527,
      527,  522,  529,  531,  532,  537,  533,  539,  527,  538,
      531,  531,  540,  536,  541,  542,  543,  534,  544,  545,
      546,  535,  547,  531,  531,  549,  531,  531,  531,  539,
      548,  550,  551,  549,  552,  553,  554,  537,  556,  555,
      557,  558,  559,  553,  560,  545,  541,  562,  561,  564,

      544,  540,  563,  565,  560,  566,  568,  569,  543,  546,
      542,  561,  570,  571,  572,  573,  575,  574,  566,  577,
      547,  555,  557,  552,  551,  548,  576,  556,  550,  578,
      558,  554,  579,  569,  563,  564,  562,  559,  580,  582,
      581,  583,  572,  565,  584,  585,  573,  587,  570,  574,
      589,  586,  588,  591,  568,  575,  590,  592,  593,  595,
      594,  571,  597,  599,  598,  596,  600,  577,  576,  602,
      592,  582,  598,  601,  603,  584,  604,  578,  581,  579,
      605,  606,  583,  586,  588,  587,  607,  609,  580,  608,
      611,  590,  610,  591,  612,  613,  600,  585,  595,  589,

      597,  614,  599,  586,  594,  593,  596,  615,  601,  616,
      617,  619,  604,  620,  602,  618,  621,  622,  623,  603,
      606,  608,  605,  624,  610,  625,  611,  626,  627,  614,
      628,  630,  609,  629,  613,  631,  607,  616,  633,  632,
      613,  616,  612,  634,  617,  622,  615,  635,  618,  636,
      637,  624,  619,  639,  638,  621,  640,  625,  641,  620,
      627,  642,  644,  645,  647,  643,  626,  650,  648,  652,
      623,  632,  629,  651,  628,  649,  630,  636,  632,  634,
      653,  654,  632,  631,  640,  656,  633,  655,  639,  658,
      641,  659,  642,  657,  635,  638,  637,  643,  662,  647,

      648,  663,  645,  650,  661,  660,  644,  664,  649,  665,
      666,  668,  651,  667,  652,  669,  670,  675,  671,  673,
      674,  677,  384,  681,  682,  683,  685,  656,  658,  654,
      653,  676,  655,  660,  657,  686,  661,  660,  678,  659,
      679,  680,  684,  662,  687,  667,  668,  688,  675,  663,
      689,  665,  674,  664,  671,  666,  669,  670,  673,  690,
      682,  691,  685,  676,  681,  692,  683,  677,  693,  694,
      678,  696,  679,  680,  684,  695,  697,  686,  698,  688,
      700,  699,  701,  703,  702,  705,  706,  704,  708,  687,
      710,  690,  702,  707,  711,  691,  709,  712,  689,  713,

      714,  715,  716,  696,  692,  718,  717,  694,  719,  720,
      721,  695,  699,  701,  717,  716,  693,  705,  697,  700,
      704,  707,  722,  723,  703,  698,  711,  709,  706,  708,
      724,  725,  712,  726,  727,  728,  714,  713,  729,  730,
      719,  715,  710,  733,  732,  731,  711,  736,  720,  734,
      735,  721,  718,  731,  737,  738,  739,  740,  741,  743,
      724,  726,  727,  744,  745,  746,  747,  748,  749,  750,
      722,  723,  752,  751,  753,  733,  725,  755,  736,  735,
      728,  730,  754,  729,  732,  734,  737,  758,  756,  740,
      757,  759,  743,  763,  741,  760,  738,  762,  761,  748,

      764,  746,  765,  766,  739,  751,  767,  747,  769,  755,
      749,  768,  745,  771,  744,  772,  773,  775,  776,  750,
      756,  770,  757,  759,  752,  758,  753,  778,  762,  754,
      761,  760,  763,  774,  770,  766,  777,  779,  780,  764,
      781,  774,  782,  784,  771,  783,  774,  785,  773,  765,
      786,  767,  768,  787,  788,  769,  772,  789,  790,  775,
      791,  792,  794,  793,  795,  776,  796,  797,  777,  779,
      799,  798,  781,  801,  782,  778,  800,  802,  803,  804,
      785,  806,  784,  805,  807,  780,  788,  783,  808,  809,
      802,  810,  787,  811,  812,  786,  795,  790,  789,  798,

      813,  794,  799,  792,  814,  796,  815,  791,  793,  797,
      816,  800,  818,  817,  819,  804,  801,  820,  821,  822,
      806,  823,  825,  807,  826,  803,  824,  805,  827,  823,
      809,  828,  813,  810,  829,  808,  830,  812,  834,  831,
      811,  817,  832,  833,  818,  835,  819,  836,  824,  820,
      825,  816,  842,  837,  838,  814,  815,  840,  844,  822,
      827,  839,  843,  841,  845,  821,  844,  846,  847,  826,
      828,  831,  830,  848,  832,  843,  849,  850,  851,  829,
      852,  853,  854,  855,  833,  846,  856,  857,  834,  836,
      838,  859,  861,  835,  837,  841,  858,  839,  840,  860,

      842,  862,  863,  864,  847,  865,  866,  867,  856,  850,
      868,  869,  848,  853,  845,  855,  871,  872,  858,  851,
      873,  849,  870,  857,  874,  876,  875,  879,  852,  881,
      854,  880,  859,  861,  863,  860,  877,  878,  887,  867,
      882,  883,  862,  884,  865,  864,  874,  885,  866,  886,
      870,  868,  888,  889,  870,  885,  890,  881,  891,  869,
      875,  873,  871,  872,  892,  894,  893,  876,  877,  878,
      880,  882,  879,  883,  895,  884,  896,  897,  898,  899,
      887,  900,  901,  886,  902,  889,  903,  908,  904,  905,
      911,  906,  907,  909,  910,  912,  892,  923,  890,  888,

      913,  924,  916,  914,  891,  893,  894,  896,  912,  897,
      898,  915,  917,  918,  901,  919,  920,  921,  922,  902,
      907,  927,  895,  904,  907,  914,  910,  925,  903,  911,
      905,  899,  906,  900,  916,  908,  913,  926,  909,  928,
      929,  932,  915,  917,  918,  930,  931,  919,  921,  923,
      934,  933,  935,  924,  936,  941,  938,  920,  937,  925,
      942,  939,  927,  940,  943,  922,  944,  945,  932,  377,
      359,  356,  324,  926,  307,  295,  269,  234,  931,  184,
      178,  170,  934,  161,  935,  929,  936,  928,  938,  937,
      149,  930,  933,  939,  941,  940,  147,  145,   94,   57,

       55,  942,   54,  943,   47,   24,   23,   22,  944,   21,
       18,   17,   11,    7,    3,    0,    0,  945,  949,  949,
      950,  950,  950,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  946,
      946,  946,  946

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cyril.lpp"
#line 2 "cyril.lpp"
#define YY_DECL extern "C" int yylex()
#include "y.tab.h"
extern "C" int line_no;
extern "C" int yyparse();
 
#line 1266 "lex.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 10 "cyril.lpp"

#line 1482 "lex.yy.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 947 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2124 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 11 "cyril.lpp"
; // Ignore whitespace
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 12 "cyril.lpp"
{ line_no++;} // Ignore comments
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 13 "cyril.lpp"
{ return LEFT; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 14 "cyril.lpp"
{ return RIGHT; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 15 "cyril.lpp"
{ return MULT; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 16 "cyril.lpp"
{ return DIV; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 17 "cyril.lpp"
{ return PLUS; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 18 "cyril.lpp"
{ return MOD; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 19 "cyril.lpp"
{ return MINUS; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 20 "cyril.lpp"
{ return AND; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 21 "cyril.lpp"
{ return OR; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 22 "cyril.lpp"
{ return EQ; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 23 "cyril.lpp"
{ return NOTEQ; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 24 "cyril.lpp"
{ return LESS; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 25 "cyril.lpp"
{ return LESSEQ; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 26 "cyril.lpp"
{ return GR; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 27 "cyril.lpp"
{ return GREQ; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 28 "cyril.lpp"
{ return NOT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 29 "cyril.lpp"
{ return SHAPE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 30 "cyril.lpp"
{ return TILE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 31 "cyril.lpp"
{ return ANIM; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 32 "cyril.lpp"
{ return NEXT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 33 "cyril.lpp"
{ return PARTICLE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 34 "cyril.lpp"
{ return PALETTE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 35 "cyril.lpp"
{ return BLINK; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 36 "cyril.lpp"
{ return DO; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 37 "cyril.lpp"
{ return FOR; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 38 "cyril.lpp"
{ return TO; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 39 "cyril.lpp"
{ return STEP; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 40 "cyril.lpp"
{ return UNTIL; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 41 "cyril.lpp"
{ return TIMES; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 42 "cyril.lpp"
{ return IF; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 43 "cyril.lpp"
{ return INIT; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 44 "cyril.lpp"
{ return WHILE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 45 "cyril.lpp"
{ return END; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 46 "cyril.lpp"
{
                          yylval.sval = strdup(yytext + 1);
                          return HEX_COLOR;
                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 50 "cyril.lpp"
{
                          yylval.fval = atof(yytext);
                          return NUMBER;
                        }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 54 "cyril.lpp"
{ yylval.sval = strdup(yytext);
  return FUNCTION;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 57 "cyril.lpp"
{ yylval.sval = strdup(yytext);
  return KEYWORD;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 60 "cyril.lpp"
{ yylval.sval = strdup(yytext);
  return KEYWORD;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 63 "cyril.lpp"
{ yylval.sval = strdup(yytext);
  return KEYWORD;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 66 "cyril.lpp"
{ yylval.sval = strdup(yytext);
  return KEYWORD;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 69 "cyril.lpp"
{ yylval.sval = strdup(yytext);
  return COLOR_NAME;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 72 "cyril.lpp"
{ yylval.sval = strdup(yytext);
return PALETTE_NAME;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 75 "cyril.lpp"
{ yylval.sval = strdup(yytext);
return COLOR_VAR;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 78 "cyril.lpp"
{ yylval.sval = strdup(yytext);
return LABEL;
}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 81 "cyril.lpp"
return ENDL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 82 "cyril.lpp"
return ASSIGN;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 83 "cyril.lpp"
return COMMA;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 84 "cyril.lpp"
ECHO;
	YY_BREAK
#line 1815 "lex.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 947 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 947 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 946);

		return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 83 "cyril.lpp"



void scannerRestart() {
  YY_FLUSH_BUFFER;
}

int yycyrilParseString(const char *str) {
  line_no = 0;
  yy_scan_string(str);
  return yyparse();
  //printf(str);
}






